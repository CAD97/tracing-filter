var searchIndex = JSON.parse('{\
"tracing_filter":{"doc":"","t":[13,13,3,4,2,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Ascii","AsciiNocolor","Diagnostics","DiagnosticsTheme","Filter","FilterLayer","Guess","Unicode","UnicodeNocolor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","enabled","eq","error","fmt","fmt","fmt","from","from","from","hash","into","into","into","into_owned","is_empty","is_error","is_warning","legacy","new","on_close","on_enter","on_event","on_exit","on_new_span","on_record","register_callsite","simple","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","warn","Filter","borrow","borrow_mut","callsite_enabled","enabled","fmt","fmt","from","from_default_env","from_env","from_str","into","max_level_hint","new","on_close","on_enter","on_exit","on_new_span","on_record","parse","to_string","try_from","try_into","type_id","Filter","add_directive","add_level","add_regex","add_target","borrow","borrow_mut","callsite_enabled","default","empty","enabled","fmt","fmt","from","from_default_env","from_env","from_str","into","new","parse","to_string","try_from","try_into","type_id","with_directive","with_level","with_regex","with_target"],"q":["tracing_filter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tracing_filter::legacy","","","","","","","","","","","","","","","","","","","","","","","","tracing_filter::simple","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Render with ASCII art and ANSI colors.","Render with ASCII art but no ANSI colors.","Resulting diagnostics from compiling a filter directive …","How to render a set of <code>Diagnostics</code>.","","A <code>Layer</code> which elevates a <code>Filter</code> from applying to a single …","Guess the best render format for stdout/stderr.","Render with Unicode drawing characters and ANSI colors.","Render with Unicode drawing characters but no ANSI colors.","","","","","","","","","","","Any errors generated by parsing a filter directive string. …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an owned version of the diagnostic set. This …","Is this diagnostic set empty, indicating a successful …","Does this diagnostic set include any errors?","Does this diagnostic set include any warnings?","Support for legacy filters, which match tracing-subscriber…","Create a new filter layer using the provided filter.","","","","","","","","Support for simple filters, which match <code>env_logger</code>’s …","","","","","","","","","","","","Any errors generated by parsing a filter directive string. …","A filter matching tracing-subscriber’s legacy <code>EnvFilter</code> …","","","","","","","Returns the argument unchanged.","Create a filter from the default <code>RUST_LOG</code> environment.","Create a filter from the environment.","Parse a filter from its string representation, discarding …","Calls <code>U::from(self)</code>.","","Create a new filter, ignoring any invalid directives. It …","","","","","","Parse a filter from its string representation.","","","","","A filter matching the semantics of the <code>env_logger</code> crate’…","Add a new filter directive.","Add a new filter directive at the given level.","Add a regex filter to this filter.","Add a new filter directive for a given target at a given …","","","","","Create an empty filter (i.e. one that filters nothing out).","","","","Returns the argument unchanged.","Create a filter from the default <code>RUST_LOG</code> environment.","Create a filter from the environment.","Parse a filter from its string representation, discarding …","Calls <code>U::from(self)</code>.","Create a new filter, ignoring any invalid directives. It …","Parse a filter from its string representation.","","","","","Builder-API version of <code>Self::add_directive</code>.","Builder-API version of <code>Self::add_level</code>.","Builder-API version of <code>Self::add_regex</code>.","Builder-API version of <code>Self::add_target</code>."],"i":[1,1,0,0,0,0,1,1,1,2,3,1,2,3,1,1,1,3,1,2,2,2,1,2,3,1,1,2,3,1,2,2,2,2,0,3,3,3,3,3,3,3,3,0,1,2,2,3,1,2,3,1,2,3,1,2,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["diagnosticstheme",4]],[[["",0],["",0]]],[[["",0],["metadata",3],["context",3]],["bool",0]],[[["",0],["diagnosticstheme",4]],["bool",0]],[[["",0],["diagnosticstheme",4]],["option",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["",0]]],[[]],[[]],[[]],[[],["diagnostics",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[]],[[["",0],["id",3],["context",3]]],[[["",0],["id",3],["context",3]]],[[["",0],["event",3],["context",3]]],[[["",0],["id",3],["context",3]]],[[["",0],["attributes",3],["id",3],["context",3]]],[[["",0],["id",3],["record",3],["context",3]]],[[["",0],["metadata",3]],["interest",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["diagnosticstheme",4]],["option",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["metadata",3]],["interest",3]],[[["",0],["metadata",3],["context",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",4,[["diagnostics",3]]]],[[]],[[["",0]],["option",4,[["levelfilter",3]]]],[[["str",0]]],[[["",0],["id",3],["context",3]]],[[["",0],["id",3],["context",3]]],[[["",0],["id",3],["context",3]]],[[["",0],["attributes",3],["id",3],["context",3]]],[[["",0],["id",3],["record",3],["context",3]]],[[["str",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["option",4]]],[[["",0]]],[[["",0],["regex",3]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["metadata",3]],["interest",3]],[[],["filter",3]],[[]],[[["",0],["metadata",3],["context",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",4,[["diagnostics",3]]]],[[]],[[["str",0]]],[[["str",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["option",4]]],[[]],[[["regex",3]]],[[]]],"p":[[4,"DiagnosticsTheme"],[3,"Diagnostics"],[3,"FilterLayer"],[3,"Filter"],[3,"Filter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};