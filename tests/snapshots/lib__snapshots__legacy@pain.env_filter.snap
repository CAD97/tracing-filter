---
source: tests/snapshots.rs
expression: "target1[span1],[span2]target2,[span3][span4],[[[[[[span5],[{field1!!!!!!!!!field2=val}]"
---
Filter {
    scope: ThreadLocal { local_data: None },
    statics: DirectiveSet {
        directives: SortedSet {
            set: SortedVec {
                vec: [
                    StaticDirective {
                        target: None,
                        fields: [],
                        level: LevelFilter::ERROR,
                    },
                ],
            },
        },
        level: LevelFilter::ERROR,
    },
    dynamics: DirectiveSet {
        directives: SortedSet {
            set: SortedVec {
                vec: [
                    DynamicDirective {
                        span: Some(
                            "span2",
                        ),
                        fields: [],
                        target: Some(
                            "target2",
                        ),
                        level: LevelFilter::TRACE,
                    },
                    DynamicDirective {
                        span: Some(
                            "span1",
                        ),
                        fields: [],
                        target: Some(
                            "target1",
                        ),
                        level: LevelFilter::TRACE,
                    },
                    DynamicDirective {
                        span: Some(
                            "span5",
                        ),
                        fields: [],
                        target: None,
                        level: LevelFilter::TRACE,
                    },
                    DynamicDirective {
                        span: Some(
                            "span4",
                        ),
                        fields: [],
                        target: None,
                        level: LevelFilter::TRACE,
                    },
                    DynamicDirective {
                        span: None,
                        fields: [
                            FieldMatch {
                                name: "field2",
                                value: Some(
                                    Pat(
                                        PatternMatch {
                                            matcher: Pattern {
                                                automaton: PremultipliedByteClass(
                                                    PremultipliedByteClass(
                                                        DenseDFA(
                                                        D 000000: 
                                                         *000020: 
                                                          000040: \x00 => 220, \x01 => 200, \x02-\x04 => 220, \x05 => 40, \x06 => 220, \x0b => 60, \x0c => 80, \r => 100, \x0e => 120, \x0f => 100, \x10 => 140, \x11 => 160, \x12 => 180
                                                          000060: \x07-\t => 220
                                                          000080: \t => 60
                                                          000100: \x07-\t => 60
                                                          000120: \x07-\x08 => 60
                                                          000140: \x08-\t => 100
                                                          000160: \x07-\t => 100
                                                          000180: \x07 => 100
                                                          000200: \x00-\x02 => 220, \x03 => 20, \x04 => 220, \x05 => 40, \x06 => 220, \x0b => 60, \x0c => 80, \r => 100, \x0e => 120, \x0f => 100, \x10 => 140, \x11 => 160, \x12 => 180
                                                        > 000220: \x00-\x04 => 220, \x05 => 40, \x06 => 220, \x0b => 60, \x0c => 80, \r => 100, \x0e => 120, \x0f => 100, \x10 => 140, \x11 => 160, \x12 => 180
                                                        )
                                                        ,
                                                    ),
                                                ),
                                            },
                                            pattern: "val",
                                        },
                                    ),
                                ),
                            },
                        ],
                        target: None,
                        level: LevelFilter::TRACE,
                    },
                ],
            },
        },
        level: LevelFilter::TRACE,
    },
    by_id: RwLock {
        data: {},
        poisoned: false,
        ..
    },
    by_cs: RwLock {
        data: {},
        poisoned: false,
        ..
    },
}
(no warnings)
